const http = require('http');
const app = require('../app');
const dotenv = require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const URI = process.env.MONGODB_URI;
const PORT = process.env.PORT | 8703;

const server = http.createServer(app);

const User = require("../models/User");

const defaultPassword = process.env.SECRET;

server.listen(PORT, () => {
    try {
        onListening();
    } catch (err) {
        let error = err;
        onError(error);
    }
});

function onListening() {
    console.log(
        `Listening on :${PORT}\n `, 
        //'Awaiting client authorization request.'
    );
}

function onError (err) {
    let error = new Error(err);

    console.error(error.message);
}

main().catch((error) => { console.log(error)});

async function main() {
    try {
        await mongoose.connect(URI);
        let existingUsers = await User.find();
        if (existingUsers.length !== 0) {
            console.log("Not first run. No data to push.");
        } else {
            const hash1 = await bcrypt.hash(defaultPassword, 10);
            const hash2 = await bcrypt.hash(defaultPassword, 10);
            const user1 = new User({
                firstName: "Erik", 
                lastName: "Britton",
                passwordHash: hash1,
                territory: "East"
            });
            const user2 = new User({
                firstName: "Eric",
                lastName: "Merritt",
                passwordHash: hash2,
                territory: "West"
            })

            const newUsers = await User.insertMany([user1, user2]);

            console.log("Inserted Users: ", newUsers);
        }
    } catch (err) {
        let error = new Error(err);
        console.error(err.message);
    } finally {
        console.log("You made it.")
    }
}



